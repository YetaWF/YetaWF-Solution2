/// <reference types="jquery" />
/// <reference types="jqueryui" />
/// <reference types="kendo-ui" />
interface IWhenReady {
    /**
     * @deprecated
     */
    callback?($tag: JQuery<HTMLElement>): void;
    callbackTS?(elem: HTMLElement): void;
}
interface IClearDiv {
    callback?(elem: HTMLElement): void;
}
/**
 * Class implementing basic services throughout YetaWF.
 */
declare class YetaWF_BasicsServices {
    /**
     * React-like createElement function so we can use JSX in our TypeScript/JavaScript code.
     */
    createElement(tag: string, attrs: any, children: any): HTMLElement;
    whenReady: IWhenReady[];
    /**
     * Registers a callback that is called when the document is ready (similar to $(document).ready()), after page content is rendered (for dynamic content),
     * or after a partial form is rendered. The callee must honor $tag/elem and only manipulate child objects.
     * Callback functions are registered by whomever needs this type of processing. For example, a grid can
     * process all whenReady requests after reloading the grid with data (which doesn't run any javascript automatically).
     * @param def
     */
    addWhenReady(callback: (section: HTMLElement) => void): void;
    /**
     * Process all callbacks for the specified element to initialize children. This is used by YetaWF.Core only.
     * @param elem The element for which all callbacks should be called to initialize children.
     */
    processAllReady($tag: JQuery<HTMLElement>): void;
    whenReadyOnce: IWhenReady[];
    /**
     * Registers a callback that is called when the document is ready (similar to $(document).ready()), after page content is rendered (for dynamic content),
     * or after a partial form is rendered. The callee must honor $tag/elem and only manipulate child objects.
     * Callback functions are registered by whomever needs this type of processing. For example, a grid can
     * process all whenReadyOnce requests after reloading the grid with data (which doesn't run any javascript automatically).
     * The callback is called for ONCE. Then the callback is removed.
     * @param def
     */
    addWhenReadyOnce(callback: (section: HTMLElement) => void): void;
    /**
     * Process all callbacks for the specified element to initialize children. This is used by YetaWF.Core only.
     * @param elem The element for which all callbacks should be called to initialize children.
     */
    processAllReadyOnce($tag: JQuery<HTMLElement>): void;
    private clearDiv;
    /**
     * Registers a callback that is called when a <div> is cleared. This is used so templates can register a cleanup
     * callback so elements can be destroyed when a div is emptied (used by UPS).
     */
    addClearDiv(callback: (section: HTMLElement) => void): void;
    /**
     * Process all callbacks for the specified element being cleared. This is used by YetaWF.Core only.
     * @param elem The element being cleared.
     */
    processClearDiv(tag: HTMLElement): void;
    /**
     * Adds an object (a Typescript class) to a tag. Used for cleanup when a parent div is removed.
     * Typically used by templates.
     * Objects attached to divs are terminated by processClearDiv which calls any handlers that registered a
     * template class using addClearDivForObjects.
     * @param templateClass - The template css class (without leading .)
     * @param divId - The div id (DOM) that where the object is attached
     * @param obj - the object to attach
     */
    addObjectDataById(templateClass: string, divId: string, obj: any): void;
    /**
     * Retrieves a data object (a Typescript class) from a tag
     * @param divId - The div id (DOM) that where the object is attached
     */
    getObjectDataById(divId: string): any;
    /**
     * Removes a data object (a Typescript class) from a tag.
     * @param divId - The div id (DOM) that where the object is attached
    */
    removeObjectDataById(divId: string): void;
    /**
     * Register a cleanup (typically used by templates) to terminate any objects that may be
     * attached to the template tag.
     * @param templateClass - The template css class (without leading .)
     */
    addClearDivForObjects(templateClass: string): void;
    /**
     * Tests whether the specified element matches the selector.
     * @param elem - The element to test.
     * @param selector - The selector to match.
     */
    elementMatches(elem: Element | null, selector: string): boolean;
    /**
     * Tests whether the specified element has the given css class.
     * @param elem The element to test.
     * @param css - The css class being tested.
     */
    elementHasClass(elem: Element | null, css: string): boolean;
    RegisterContentChange(callback: (event: Event, addonGuid: string, on: boolean) => void): void;
    RegisterNewPage(callback: (event: Event, url: string) => void): void;
    /**
     * Expand/collapse support using 2 action links (Name=Expand/Collapse) which make 2 divs hidden/visible  (alternating)
     * @param divId The <div> containing the 2 action links.
     * @param collapsedId - The <div> to hide/show.
     * @param expandedId - The <div> to show/hide.
     */
    ExpandCollapse(divId: string, collapsedId: string, expandedId: string): void;
}
/**
 * Basic services available throughout YetaWF.
 */
declare var YetaWF_Basics: YetaWF_BasicsServices;
